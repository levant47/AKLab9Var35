#include <stdint.h>
#include <stdio.h>

const float zero = 0;

void first_task()
{
    float a = 418;
    float b = 2;
    float c = 7.3f;
    const int result_size = 5;
    float result[result_size];

    __asm
    {
        finit ; –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ FPU
        mov ecx, 0 ; –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Ü–∏–∫–ª–∞
        fld1 ; –∑–∞–≥—Ä—É–∂–∞–µ–º 1 –Ω–∞ —Å—Ç–µ–∫ –∫–∞–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ N
        fld [zero] ; –∑–∞–≥—Ä—É–∂–∞–µ–º 0 –Ω–∞ —Å—Ç–µ–∫ –∫–∞–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã

        ; –∫ –Ω–∞—á–∞–ª—É –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ –≤ ST(0) –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã, –∞ –≤ ST(1) —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ N
        loop_start:
        fld ST(1) ; –∑–∞–≥—Ä—É–∂–∞–µ–º N –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ —Å—Ç–µ–∫
        fmul ST(0), ST(0) ; —Å—á–∏—Ç–∞–µ–º N^2
        fmul [b] ; —Å—á–∏—Ç–∞–µ–º 2 * N^2
        fadd [c] ; —Å—á–∏—Ç–∞–µ–º 2 * N^2 + 7.3
        fdivr [a] ; —Å—á–∏—Ç–∞–µ–º 418 / (2 * N^2 + 7.3)
        fadd ; –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ —Å—É–º–º–µ
        fst [result + ecx * 4] ; –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –≤ –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

        fld1 ; –∑–∞–≥—Ä—É–∂–∞–µ–º 1 –Ω–∞ —Å—Ç–µ–∫
        fadd ST(2), ST(0) ; –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é N
        fstp ST(0) ; —É–±–∏—Ä–∞–µ–º 1 —Å–æ —Å—Ç–µ–∫–∞
        inc ecx ; —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–∞
        cmp ecx, result_size
        jne loop_start ; –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 5 –∏—Ç–µ—Ä–∞—Ü–∏–π, —Ç–æ –º—ã –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
    }

    printf("1st\n");
    for (int i = 0; i < result_size; i += 1)
    {
        printf("%d: %f\n", i + 1, result[i]);
    }
    printf("\n");
}

void second_task()
{
    float a = 20.f;
    float b = 2.5f;
    float c = 0.2f;
    float result;

    __asm
    {
        finit ; –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ FPU
        fld1 ; –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å—Ç–µ–∫ 1, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º X

        ; –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞ –≤ ST(0) –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ X
        loop_start:
        fld ST(0) ; –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ X –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ —Å—Ç–µ–∫
        fld [b] ; –∑–∞–≥—Ä—É–∂–∞–µ–º 2.5 –Ω–∞ —Å—Ç–µ–∫
        fyl2x ; —Å—á–∏—Ç–∞–µ–º X * log_2(2.5)
        fld1
        fld ST(1) ; –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç X * log_2(2.5)
        fprem ; —Å—á–∏—Ç–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å X * log_2(2.5)
        f2xm1 ; —Å—á–∏—Ç–∞–µ–º 2 ^ (–¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –æ—Ç X * log_2(2.5)) - 1
        fadd ; –¥–æ–±–∞–≤–ª—è–µ–º 1 –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        fscale ; –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ 2.5 ^ X, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ST(0)
        fxch ST(1)
        fstp ST(0) ; –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –±–ª–æ–∫–∞ –≤ ST(0) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ 2.5^X, –∞ –≤ ST(1) —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ X

        fld ST(1) ; –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ X –Ω–∞ —Å—Ç–µ–∫
        fmul ST(0), ST(0) ; —Å—á–∏—Ç–∞–µ–º X^2
        fadd ; —Å–ª–æ–∂–∏—Ç—å X^2 + 2.5^X
        fdivr [a] ; –≤—ã—á–∏—Å–ª–∏—Ç—å 20 / (X^2 + 2.5^X)

        fld [c]
        fcomip ST(0), ST(1)
        jb loop_end ; –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—å—à–µ 0.2, —Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ü–∏–∫–ª

        fstp ST(0) ; —É–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ —Å—Ç–µ–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
        fld1
        fadd ; —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 1 —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ X
        jmp loop_start ; –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–∏–∫–ª

        loop_end:
        fstp [result] ; –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø–∞–º—è—Ç—å
    }

    printf("2nd: %d\n\n", (int)result);
}

void third_task()
{
    float result;
    float a = 2;
    float b = 4;
    float c = 40;
    float d = 180;
    float e = -1;
    float f = 3;

    __asm
    {
        ; 3 * arccsc(4*A + tan(40∞))
        finit
        fld [a]
        fld [b]
        fmulp ST(1), ST(0) ; 4 * A

        fld [c]
        fld [d]
        fdivp ST(1), ST(0)
        fldpi
        fmulp ST(1), ST(0) ; convert 40 degrees to radians
        fptan
        fstp ST(0)

        fadd

        ; acsc(x) = atan(sqrt(1/(x*x-1)))
        fld ST(0) ; Compute x*x
        fmul
        fld1 ; Compute x*x-1
        fsub
        fld1 ; Compute 1/(x*x-1)
        fdivr
        fsqrt ; Compute sqrt(1/(x*x-1))
        fld1
        fpatan ; Compute atan of above.

        fld [f]
        fmulp ST(1), ST(0)

        fstp [result]
    }

    printf("3rd: %f\n\n", result);
}

void fourth_task()
{
    float initial_value = 0.5;
    float step = 0.2;
    float a = 7;
    const int result_size = 5;
    float result[result_size];

    __asm
    {
        ; Y = 7^x
        finit
        mov ecx, 0
        fld [initial_value]

        loop_start:

        fld ST(0)
        fld [a]
        fyl2x
        fld1
        fld ST(1)
        fprem
        f2xm1
        fadd
        fscale
        fxch ST(1)
        fstp ST(0) ; calculate 2.5 ^ x, the result is in ST(0), current value of X is still in ST(1)

        fstp [result + ecx * 4]

        inc ecx
        fld [step]
        fadd
        cmp ecx, result_size
        jne loop_start
    }

    printf("4th\n");
    for (int i = 0; i < result_size; i += 1)
    {
        printf("%d: %f\n", i + 1, result[i]);
    }
    printf("\n");
}

int main()
{
    first_task();
    second_task();
    third_task();
    fourth_task();

    return 0;
}

